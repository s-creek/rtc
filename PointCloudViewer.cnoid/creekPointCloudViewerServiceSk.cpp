// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "creekPointCloudViewerService.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



OpenHRP::creekPointCloudViewerService_ptr OpenHRP::creekPointCloudViewerService_Helper::_nil() {
  return ::OpenHRP::creekPointCloudViewerService::_nil();
}

::CORBA::Boolean OpenHRP::creekPointCloudViewerService_Helper::is_nil(::OpenHRP::creekPointCloudViewerService_ptr p) {
  return ::CORBA::is_nil(p);

}

void OpenHRP::creekPointCloudViewerService_Helper::release(::OpenHRP::creekPointCloudViewerService_ptr p) {
  ::CORBA::release(p);
}

void OpenHRP::creekPointCloudViewerService_Helper::marshalObjRef(::OpenHRP::creekPointCloudViewerService_ptr obj, cdrStream& s) {
  ::OpenHRP::creekPointCloudViewerService::_marshalObjRef(obj, s);
}

OpenHRP::creekPointCloudViewerService_ptr OpenHRP::creekPointCloudViewerService_Helper::unmarshalObjRef(cdrStream& s) {
  return ::OpenHRP::creekPointCloudViewerService::_unmarshalObjRef(s);
}

void OpenHRP::creekPointCloudViewerService_Helper::duplicate(::OpenHRP::creekPointCloudViewerService_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

OpenHRP::creekPointCloudViewerService_ptr
OpenHRP::creekPointCloudViewerService::_duplicate(::OpenHRP::creekPointCloudViewerService_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

OpenHRP::creekPointCloudViewerService_ptr
OpenHRP::creekPointCloudViewerService::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


OpenHRP::creekPointCloudViewerService_ptr
OpenHRP::creekPointCloudViewerService::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

OpenHRP::creekPointCloudViewerService_ptr
OpenHRP::creekPointCloudViewerService::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_creekPointCloudViewerService _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_creekPointCloudViewerService* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_creekPointCloudViewerService;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* OpenHRP::creekPointCloudViewerService::_PD_repoId = "IDL:OpenHRP/creekPointCloudViewerService:1.0";


OpenHRP::_objref_creekPointCloudViewerService::~_objref_creekPointCloudViewerService() {
  
}


OpenHRP::_objref_creekPointCloudViewerService::_objref_creekPointCloudViewerService(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::OpenHRP::creekPointCloudViewerService::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
OpenHRP::_objref_creekPointCloudViewerService::_ptrToObjRef(const char* id)
{
  if( id == ::OpenHRP::creekPointCloudViewerService::_PD_repoId )
    return (::OpenHRP::creekPointCloudViewerService_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::OpenHRP::creekPointCloudViewerService::_PD_repoId) )
    return (::OpenHRP::creekPointCloudViewerService_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void
class _0RL_cd_b22f7375262a75a3_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_b22f7375262a75a3_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
    
  
  static const char* const _user_exns[];

  
};

const char* const _0RL_cd_b22f7375262a75a3_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_b22f7375262a75a3_10000000(omniCallDescriptor*, omniServant* svnt)
{
  
  OpenHRP::_impl_creekPointCloudViewerService* impl = (OpenHRP::_impl_creekPointCloudViewerService*) svnt->_ptrToInterface(OpenHRP::creekPointCloudViewerService::_PD_repoId);
  impl->start();


}

void OpenHRP::_objref_creekPointCloudViewerService::start()
{
  _0RL_cd_b22f7375262a75a3_00000000 _call_desc(_0RL_lcfn_b22f7375262a75a3_10000000, "start", 6);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_b22f7375262a75a3_20000000(omniCallDescriptor*, omniServant* svnt)
{
  
  OpenHRP::_impl_creekPointCloudViewerService* impl = (OpenHRP::_impl_creekPointCloudViewerService*) svnt->_ptrToInterface(OpenHRP::creekPointCloudViewerService::_PD_repoId);
  impl->stop();


}

void OpenHRP::_objref_creekPointCloudViewerService::stop()
{
  _0RL_cd_b22f7375262a75a3_00000000 _call_desc(_0RL_lcfn_b22f7375262a75a3_20000000, "stop", 5);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cdouble_i_cdouble_i_cdouble_i_clong
class _0RL_cd_b22f7375262a75a3_30000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_b22f7375262a75a3_30000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Double arg_0;
  ::CORBA::Double arg_1;
  ::CORBA::Double arg_2;
  ::CORBA::Long arg_3;
  ::CORBA::Boolean result;
};

void _0RL_cd_b22f7375262a75a3_30000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  arg_2 >>= _n;
  arg_3 >>= _n;

}

void _0RL_cd_b22f7375262a75a3_30000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Double&)arg_0 <<= _n;
  (::CORBA::Double&)arg_1 <<= _n;
  (::CORBA::Double&)arg_2 <<= _n;
  (::CORBA::Long&)arg_3 <<= _n;

}

void _0RL_cd_b22f7375262a75a3_30000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_b22f7375262a75a3_30000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_b22f7375262a75a3_30000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_b22f7375262a75a3_40000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_b22f7375262a75a3_30000000* tcd = (_0RL_cd_b22f7375262a75a3_30000000*)cd;
  OpenHRP::_impl_creekPointCloudViewerService* impl = (OpenHRP::_impl_creekPointCloudViewerService*) svnt->_ptrToInterface(OpenHRP::creekPointCloudViewerService::_PD_repoId);
  tcd->result = impl->detectLandingPoint(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);


}

::CORBA::Boolean OpenHRP::_objref_creekPointCloudViewerService::detectLandingPoint(::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double w, ::CORBA::Long ft)
{
  _0RL_cd_b22f7375262a75a3_30000000 _call_desc(_0RL_lcfn_b22f7375262a75a3_40000000, "detectLandingPoint", 19);
  _call_desc.arg_0 = x;
  _call_desc.arg_1 = y;
  _call_desc.arg_2 = w;
  _call_desc.arg_3 = ft;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void_o_cdouble_o_cdouble_o_cdouble_o_cdouble_o_cdouble_o_cdouble_i_clong
class _0RL_cd_b22f7375262a75a3_50000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_b22f7375262a75a3_50000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Double arg_0;
  ::CORBA::Double arg_1;
  ::CORBA::Double arg_2;
  ::CORBA::Double arg_3;
  ::CORBA::Double arg_4;
  ::CORBA::Double arg_5;
  ::CORBA::Long arg_6;
};

void _0RL_cd_b22f7375262a75a3_50000000::marshalArguments(cdrStream& _n)
{
  arg_6 >>= _n;

}

void _0RL_cd_b22f7375262a75a3_50000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_6 <<= _n;

}

void _0RL_cd_b22f7375262a75a3_50000000::marshalReturnedValues(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  arg_2 >>= _n;
  arg_3 >>= _n;
  arg_4 >>= _n;
  arg_5 >>= _n;

}

void _0RL_cd_b22f7375262a75a3_50000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Double&)arg_0 <<= _n;
  (::CORBA::Double&)arg_1 <<= _n;
  (::CORBA::Double&)arg_2 <<= _n;
  (::CORBA::Double&)arg_3 <<= _n;
  (::CORBA::Double&)arg_4 <<= _n;
  (::CORBA::Double&)arg_5 <<= _n;

}

const char* const _0RL_cd_b22f7375262a75a3_50000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_b22f7375262a75a3_60000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_b22f7375262a75a3_50000000* tcd = (_0RL_cd_b22f7375262a75a3_50000000*)cd;
  OpenHRP::_impl_creekPointCloudViewerService* impl = (OpenHRP::_impl_creekPointCloudViewerService*) svnt->_ptrToInterface(OpenHRP::creekPointCloudViewerService::_PD_repoId);
  impl->getLandingPoint(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4, tcd->arg_5, tcd->arg_6);


}

void OpenHRP::_objref_creekPointCloudViewerService::getLandingPoint(::CORBA::Double& x, ::CORBA::Double& y, ::CORBA::Double& z, ::CORBA::Double& r, ::CORBA::Double& p, ::CORBA::Double& w, ::CORBA::Long ft)
{
  _0RL_cd_b22f7375262a75a3_50000000 _call_desc(_0RL_lcfn_b22f7375262a75a3_60000000, "getLandingPoint", 16);
  _call_desc.arg_6 = ft;

  _invoke(_call_desc);
  x = _call_desc.arg_0;
  y = _call_desc.arg_1;
  z = _call_desc.arg_2;
  r = _call_desc.arg_3;
  p = _call_desc.arg_4;
  w = _call_desc.arg_5;


}
// Local call call-back function.
static void
_0RL_lcfn_b22f7375262a75a3_70000000(omniCallDescriptor*, omniServant* svnt)
{
  
  OpenHRP::_impl_creekPointCloudViewerService* impl = (OpenHRP::_impl_creekPointCloudViewerService*) svnt->_ptrToInterface(OpenHRP::creekPointCloudViewerService::_PD_repoId);
  impl->test();


}

void OpenHRP::_objref_creekPointCloudViewerService::test()
{
  _0RL_cd_b22f7375262a75a3_00000000 _call_desc(_0RL_lcfn_b22f7375262a75a3_70000000, "test", 5);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_b22f7375262a75a3_80000000(omniCallDescriptor*, omniServant* svnt)
{
  
  OpenHRP::_impl_creekPointCloudViewerService* impl = (OpenHRP::_impl_creekPointCloudViewerService*) svnt->_ptrToInterface(OpenHRP::creekPointCloudViewerService::_PD_repoId);
  impl->changeMode();


}

void OpenHRP::_objref_creekPointCloudViewerService::changeMode()
{
  _0RL_cd_b22f7375262a75a3_00000000 _call_desc(_0RL_lcfn_b22f7375262a75a3_80000000, "changeMode", 11);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cboolean
class _0RL_cd_b22f7375262a75a3_90000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_b22f7375262a75a3_90000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Boolean result;
};

void _0RL_cd_b22f7375262a75a3_90000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_b22f7375262a75a3_90000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_b22f7375262a75a3_90000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_b22f7375262a75a3_a0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_b22f7375262a75a3_90000000* tcd = (_0RL_cd_b22f7375262a75a3_90000000*)cd;
  OpenHRP::_impl_creekPointCloudViewerService* impl = (OpenHRP::_impl_creekPointCloudViewerService*) svnt->_ptrToInterface(OpenHRP::creekPointCloudViewerService::_PD_repoId);
  tcd->result = impl->autoFittinSwitch();


}

::CORBA::Boolean OpenHRP::_objref_creekPointCloudViewerService::autoFittinSwitch()
{
  _0RL_cd_b22f7375262a75a3_90000000 _call_desc(_0RL_lcfn_b22f7375262a75a3_a0000000, "autoFittinSwitch", 17);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_b22f7375262a75a3_b0000000(omniCallDescriptor*, omniServant* svnt)
{
  
  OpenHRP::_impl_creekPointCloudViewerService* impl = (OpenHRP::_impl_creekPointCloudViewerService*) svnt->_ptrToInterface(OpenHRP::creekPointCloudViewerService::_PD_repoId);
  impl->clear();


}

void OpenHRP::_objref_creekPointCloudViewerService::clear()
{
  _0RL_cd_b22f7375262a75a3_00000000 _call_desc(_0RL_lcfn_b22f7375262a75a3_b0000000, "clear", 6);


  _invoke(_call_desc);



}
OpenHRP::_pof_creekPointCloudViewerService::~_pof_creekPointCloudViewerService() {}


omniObjRef*
OpenHRP::_pof_creekPointCloudViewerService::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::OpenHRP::_objref_creekPointCloudViewerService(ior, id);
}


::CORBA::Boolean
OpenHRP::_pof_creekPointCloudViewerService::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::OpenHRP::creekPointCloudViewerService::_PD_repoId) )
    return 1;
  
  return 0;
}

const OpenHRP::_pof_creekPointCloudViewerService _the_pof_OpenHRP_mcreekPointCloudViewerService;

OpenHRP::_impl_creekPointCloudViewerService::~_impl_creekPointCloudViewerService() {}


::CORBA::Boolean
OpenHRP::_impl_creekPointCloudViewerService::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "start") ) {

    _0RL_cd_b22f7375262a75a3_00000000 _call_desc(_0RL_lcfn_b22f7375262a75a3_10000000, "start", 6, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "stop") ) {

    _0RL_cd_b22f7375262a75a3_00000000 _call_desc(_0RL_lcfn_b22f7375262a75a3_20000000, "stop", 5, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "detectLandingPoint") ) {

    _0RL_cd_b22f7375262a75a3_30000000 _call_desc(_0RL_lcfn_b22f7375262a75a3_40000000, "detectLandingPoint", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getLandingPoint") ) {

    _0RL_cd_b22f7375262a75a3_50000000 _call_desc(_0RL_lcfn_b22f7375262a75a3_60000000, "getLandingPoint", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "test") ) {

    _0RL_cd_b22f7375262a75a3_00000000 _call_desc(_0RL_lcfn_b22f7375262a75a3_70000000, "test", 5, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "changeMode") ) {

    _0RL_cd_b22f7375262a75a3_00000000 _call_desc(_0RL_lcfn_b22f7375262a75a3_80000000, "changeMode", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "autoFittinSwitch") ) {

    _0RL_cd_b22f7375262a75a3_90000000 _call_desc(_0RL_lcfn_b22f7375262a75a3_a0000000, "autoFittinSwitch", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "clear") ) {

    _0RL_cd_b22f7375262a75a3_00000000 _call_desc(_0RL_lcfn_b22f7375262a75a3_b0000000, "clear", 6, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
OpenHRP::_impl_creekPointCloudViewerService::_ptrToInterface(const char* id)
{
  if( id == ::OpenHRP::creekPointCloudViewerService::_PD_repoId )
    return (::OpenHRP::_impl_creekPointCloudViewerService*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::OpenHRP::creekPointCloudViewerService::_PD_repoId) )
    return (::OpenHRP::_impl_creekPointCloudViewerService*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
OpenHRP::_impl_creekPointCloudViewerService::_mostDerivedRepoId()
{
  return ::OpenHRP::creekPointCloudViewerService::_PD_repoId;
}

POA_OpenHRP::creekPointCloudViewerService::~creekPointCloudViewerService() {}

