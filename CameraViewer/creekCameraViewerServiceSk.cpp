// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "creekCameraViewerService.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



OpenHRP::creekCameraViewerService_ptr OpenHRP::creekCameraViewerService_Helper::_nil() {
  return ::OpenHRP::creekCameraViewerService::_nil();
}

::CORBA::Boolean OpenHRP::creekCameraViewerService_Helper::is_nil(::OpenHRP::creekCameraViewerService_ptr p) {
  return ::CORBA::is_nil(p);

}

void OpenHRP::creekCameraViewerService_Helper::release(::OpenHRP::creekCameraViewerService_ptr p) {
  ::CORBA::release(p);
}

void OpenHRP::creekCameraViewerService_Helper::marshalObjRef(::OpenHRP::creekCameraViewerService_ptr obj, cdrStream& s) {
  ::OpenHRP::creekCameraViewerService::_marshalObjRef(obj, s);
}

OpenHRP::creekCameraViewerService_ptr OpenHRP::creekCameraViewerService_Helper::unmarshalObjRef(cdrStream& s) {
  return ::OpenHRP::creekCameraViewerService::_unmarshalObjRef(s);
}

void OpenHRP::creekCameraViewerService_Helper::duplicate(::OpenHRP::creekCameraViewerService_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

OpenHRP::creekCameraViewerService_ptr
OpenHRP::creekCameraViewerService::_duplicate(::OpenHRP::creekCameraViewerService_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

OpenHRP::creekCameraViewerService_ptr
OpenHRP::creekCameraViewerService::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


OpenHRP::creekCameraViewerService_ptr
OpenHRP::creekCameraViewerService::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

OpenHRP::creekCameraViewerService_ptr
OpenHRP::creekCameraViewerService::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_creekCameraViewerService _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_creekCameraViewerService* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_creekCameraViewerService;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* OpenHRP::creekCameraViewerService::_PD_repoId = "IDL:OpenHRP/creekCameraViewerService:1.0";


OpenHRP::_objref_creekCameraViewerService::~_objref_creekCameraViewerService() {
  
}


OpenHRP::_objref_creekCameraViewerService::_objref_creekCameraViewerService(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::OpenHRP::creekCameraViewerService::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
OpenHRP::_objref_creekCameraViewerService::_ptrToObjRef(const char* id)
{
  if( id == ::OpenHRP::creekCameraViewerService::_PD_repoId )
    return (::OpenHRP::creekCameraViewerService_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::OpenHRP::creekCameraViewerService::_PD_repoId) )
    return (::OpenHRP::creekCameraViewerService_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void
class _0RL_cd_99b784f75408b1c4_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_99b784f75408b1c4_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
    
  
  static const char* const _user_exns[];

  
};

const char* const _0RL_cd_99b784f75408b1c4_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_99b784f75408b1c4_10000000(omniCallDescriptor*, omniServant* svnt)
{
  
  OpenHRP::_impl_creekCameraViewerService* impl = (OpenHRP::_impl_creekCameraViewerService*) svnt->_ptrToInterface(OpenHRP::creekCameraViewerService::_PD_repoId);
  impl->setDraw();


}

void OpenHRP::_objref_creekCameraViewerService::setDraw()
{
  _0RL_cd_99b784f75408b1c4_00000000 _call_desc(_0RL_lcfn_99b784f75408b1c4_10000000, "setDraw", 8);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring
class _0RL_cd_99b784f75408b1c4_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_99b784f75408b1c4_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
};

void _0RL_cd_99b784f75408b1c4_20000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_99b784f75408b1c4_20000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

const char* const _0RL_cd_99b784f75408b1c4_20000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_99b784f75408b1c4_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_99b784f75408b1c4_20000000* tcd = (_0RL_cd_99b784f75408b1c4_20000000*)cd;
  OpenHRP::_impl_creekCameraViewerService* impl = (OpenHRP::_impl_creekCameraViewerService*) svnt->_ptrToInterface(OpenHRP::creekCameraViewerService::_PD_repoId);
  impl->setSearchFlag(tcd->arg_0);


}

void OpenHRP::_objref_creekCameraViewerService::setSearchFlag(const char* list)
{
  _0RL_cd_99b784f75408b1c4_20000000 _call_desc(_0RL_lcfn_99b784f75408b1c4_30000000, "setSearchFlag", 14);
  _call_desc.arg_0 = list;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_99b784f75408b1c4_40000000(omniCallDescriptor*, omniServant* svnt)
{
  
  OpenHRP::_impl_creekCameraViewerService* impl = (OpenHRP::_impl_creekCameraViewerService*) svnt->_ptrToInterface(OpenHRP::creekCameraViewerService::_PD_repoId);
  impl->show();


}

void OpenHRP::_objref_creekCameraViewerService::show()
{
  _0RL_cd_99b784f75408b1c4_00000000 _call_desc(_0RL_lcfn_99b784f75408b1c4_40000000, "show", 5);


  _invoke(_call_desc);



}
OpenHRP::_pof_creekCameraViewerService::~_pof_creekCameraViewerService() {}


omniObjRef*
OpenHRP::_pof_creekCameraViewerService::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::OpenHRP::_objref_creekCameraViewerService(ior, id);
}


::CORBA::Boolean
OpenHRP::_pof_creekCameraViewerService::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::OpenHRP::creekCameraViewerService::_PD_repoId) )
    return 1;
  
  return 0;
}

const OpenHRP::_pof_creekCameraViewerService _the_pof_OpenHRP_mcreekCameraViewerService;

OpenHRP::_impl_creekCameraViewerService::~_impl_creekCameraViewerService() {}


::CORBA::Boolean
OpenHRP::_impl_creekCameraViewerService::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "setDraw") ) {

    _0RL_cd_99b784f75408b1c4_00000000 _call_desc(_0RL_lcfn_99b784f75408b1c4_10000000, "setDraw", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setSearchFlag") ) {

    _0RL_cd_99b784f75408b1c4_20000000 _call_desc(_0RL_lcfn_99b784f75408b1c4_30000000, "setSearchFlag", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "show") ) {

    _0RL_cd_99b784f75408b1c4_00000000 _call_desc(_0RL_lcfn_99b784f75408b1c4_40000000, "show", 5, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
OpenHRP::_impl_creekCameraViewerService::_ptrToInterface(const char* id)
{
  if( id == ::OpenHRP::creekCameraViewerService::_PD_repoId )
    return (::OpenHRP::_impl_creekCameraViewerService*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::OpenHRP::creekCameraViewerService::_PD_repoId) )
    return (::OpenHRP::_impl_creekCameraViewerService*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
OpenHRP::_impl_creekCameraViewerService::_mostDerivedRepoId()
{
  return ::OpenHRP::creekCameraViewerService::_PD_repoId;
}

POA_OpenHRP::creekCameraViewerService::~creekCameraViewerService() {}

